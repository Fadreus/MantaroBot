/*
 * Copyright (C) 2016-2018 David Alejandro Rubio Escares / Kodehawa
 *
 * Mantaro is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * Mantaro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mantaro.  If not, see http://www.gnu.org/licenses/
 */

/* Mantaro's build.gradle */

//Plugins
plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
    //Creates FatJars
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    //Checks for RestActions
    //aka did you queue but harsh
    //RIP jdaction 2017-2018
    //id 'com.sedmelluq.jdaction' version '1.0.1'
    //Tell me when smth is outdated
    id 'com.github.ben-manes.versions' version '0.20.0'
    //Builds docker images
    id 'com.palantir.docker' version '0.22.1'
}

//Define the Main Class
mainClassName = "net.kodehawa.mantarobot.MantaroBot"

//Use an unified versioning system
def ver = new Version(major: 5, minor: 3, revision: 0)
version ver.toString()

//We are going to use Java 8 (compile on 11)
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kodehawa/maven" }
    maven { url 'https://dl.bintray.com/natanbc/maven' }
    maven { url 'https://jitpack.io' }
}

task generateLanguageList {
    def out = new PrintStream(new FileOutputStream("src/main/resources/assets/languages/list.txt"))
    new File("src/main/resources/assets/languages").listFiles().each {
        if(it.getName().endsWith("json")) {
            out.println(it.getName())
        }
    }
    out.close()
}

dependencies {
    //remember to update this 3 all the time lul
    compile 'net.dv8tion:JDA:3.8.3_464'
    compile 'com.github.FredBoat:Lavalink-Client:209fa37e2e'

    //before: classpathscanner
    compile 'io.github.classgraph:classgraph:4.6.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    
    compile 'br.com.brjdevs:utils:1.0.0_15'

    compile 'com.google.guava:guava:27.0.1-jre'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.7'

    compile 'com.rethinkdb:rethinkdb-driver:2.3.3'

    compile 'io.sentry:sentry:1.7.10'

    compile 'net.jodah:expiringmap:0.5.8'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'org.apache.commons:commons-text:1.6'

    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'net.kodehawa:imageboard-api:2.0.7'
    compile 'com.github.natanbc:discordbots-api:3.3.3'

    compileOnly "org.projectlombok:lombok:1.18.4"

    compile 'com.github.natanbc:java-eval:1.0'

    compile 'redis.clients:jedis:2.9.0'

    //Basically for FinderUtil
    compile 'com.jagrosh:jda-utilities:2.1.4'

    compile 'com.github.natanbc:usage-tracker:0.1.1'

    compile 'io.prometheus:simpleclient:0.5.0'
    compile 'io.prometheus:simpleclient_hotspot:0.5.0'
    compile 'io.prometheus:simpleclient_httpserver:0.5.0'
    
    compile 'com.github.natanbc.sox:sox-core:14096f6'

    compile project(':graphql')
    
    //Unit tests
    testCompile 'junit:junit:4.12'
}

docker {
    name "mantaro/mantaro:$ver"
    tag "latest", "mantaro/mantaro:latest"
    files shadowJar.outputs, "jlink.sh"
    copySpec.from("assets").into("assets")
    buildArgs([
        version: ver.toString(),
        jattachVersion: "v1.5"
    ])
}

docker.dependsOn shadowJar

compileJava.dependsOn generateLanguageList

//This doesn't work?
test.dependsOn generateLanguageList

def lint = [
        "auxiliaryclass",
        "cast",
        "classfile",
        "deprecation",
        "dep-ann",
        "divzero",
        "empty",
        "exports",
        "fallthrough",
        "finally",
        "module",
        "opens",
        "options",
        "overloads",
        "overrides",
        "path",
        //removed because of "No processor claimed any of these annotations: ..."
        //"processing",
        "rawtypes",
        "removal",
        "requires-automatic",
        "requires-transitive-automatic",
        "serial",
        "static",
        "try",
        "unchecked",
        "varargs",
        "preview"
]

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/MantaroInfo.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'MantaroInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath
    options.compilerArgs += ["-Xlint:${lint.join(",")}", "-Werror"]

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

build.dependsOn shadowJar

shadowJar {
    classifier = null
    exclude 'module-info.class'
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}
